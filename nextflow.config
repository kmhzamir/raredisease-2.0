/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/raredisease Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    //AWS config parameters
    config_profile_description = 'AWSBATCH Cloud Profile'
    config_profile_contact = 'Alexander Peltzer (@apeltzer)'
    config_profile_url = 'https://aws.amazon.com/batch/'
 
    awsqueue = raredisease-queue
    awsregion = 'ap-southeast-1'
    awscli = '/home/ec2-user/miniconda/bin/aws'

    // Required options
    input                      = null

    // References
    genome                     = 'GRCh38'
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false
    local_genomes              = null
    save_reference             = false
    mito_name                  = 'chrM'

    // Main options
    analysis_type              = 'wgs'
    bait_padding               = 100
    save_mapped_as_cram        = false
    skip_cnv_calling           = false
    skip_snv_annotation        = false
    skip_sv_annotation         = false
    skip_mt_analysis           = false
    skip_fastp                 = false
    skip_haplocheck            = false
    skip_mt_annotation         = false
    gens_switch                = false
    cadd_resources             = null
    platform                   = 'illumina'

    // Alignment
    aligner                    = 'bwamem2'
    rmdup                      = false

    // sentieon Defaults
    ml_model                   = ''

    // Dnascope SNV calling
    pcr_amplification          = false
    variant_type               = 'snp,indel'

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Modify fastqs (trim/split) with FASTP
    trim_fastq          = false // No trimming
    clip_r1             = 0
    clip_r2             = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq        = 0
    save_trimmed        = false
    save_split_fastqs   = false

    // Main options
    split_fastq            = 50000000   // FASTQ files will not be split by default by FASTP

    // UMI tagged reads
    umi_read_structure    = null        // no UMI
    group_by_umi_strategy = 'Adjacency' // default strategy when running with UMI for GROUPREADSBYUMI


    // Boilerplate options
    outdir                     = 'results'
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/raredisease custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/raredisease.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/raredisease profiles: ${params.custom_config_base}/pipeline/raredisease.config")
// }
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Load nf-core/raredisease custom config
try {
    includeConfig "${params.custom_config_base}/pipeline/raredisease.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/raredisease profiles: ${params.custom_config_base}/pipeline/raredisease.config")
}


// Load wes.config if --analysis_type='wes'
if (params.analysis_type == 'wes') {
    includeConfig 'conf/wes.config'
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER      = "/.Rprofile"
    R_ENVIRON_USER      = "/.Renviron"
    JULIA_DEPOT_PATH    = "/usr/local/share/julia"
    NXF_CLOUDCACHE_PATH = "s3://refgenomes-synapse/output/run08-S103-37-rd2.0/cache"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
    overwrite = true
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
    overwrite = true
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
    overwrite = true
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
    overwrite = true
}

process.executor = 'awsbatch'
process.queue = params.awsqueue
aws.region = params.awsregion
aws.batch.cliPath = params.awscli

manifest {
    name            = 'synapsys/raredisease'
    author          = """Zamirudin Harun"""
    homePage        = 'https://github.com/kmhzamir/raredisease-2.0'
    description     = """call and score variants from SNV-WES of rare disease patients"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '2.0'
    doi             = ''
}

// Load DSL2 module options from config files, where each file contains the options for modules used in the eponymous subworkflow.

includeConfig 'conf/modules.config'
includeConfig 'conf/modules/align_MT.config'
includeConfig 'conf/modules/raredisease.config'
includeConfig 'conf/modules/call_snv.config'
includeConfig 'conf/modules/annotate_snvs.config'
includeConfig 'conf/modules/align_bwa_bwamem2.config'
includeConfig 'conf/modules/annotate_consequence_pli.config'
includeConfig 'conf/modules/convert_mt_bam_to_fastq.config'
includeConfig 'conf/modules/prepare_references.config'
includeConfig 'conf/modules/qc_bam.config'
includeConfig 'conf/modules/rank_variants.config'
includeConfig 'conf/modules/scatter_genome.config'
includeConfig 'conf/modules/recalibrate.config'
includeConfig 'conf/modules/call_snv_MT.config'
includeConfig 'conf/modules/postprocess_MT_calls.config'
includeConfig 'conf/modules/annotate_mt_snvs.config'
includeConfig 'conf/modules/annotate_rhocallviz.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
